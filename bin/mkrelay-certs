#!/bin/zsh

set -xe

clusters=$*

relay_root_cert_name=relay-root
dns_name='*.gloo-mesh'
gloo_mesh_int_cert_name=gloo-mesh-int
relay_server_cert_name=relay-server-tls
relay_signing_cert_name=relay-tls-signing
well_known_mac_docker_host="host.docker.internal:9900"
well_known_linux_docker_host="172.17.0.1"

# root cert
openssl req -new -newkey rsa:4096 -x509 -sha256 \
  -days 3650 -nodes -out ${relay_root_cert_name}.crt -keyout ${relay_root_cert_name}.key \
  -subj "/CN=relay-root-ca" \
  -addext "keyUsage = keyCertSign"

# Server certificate configuration
cat > "${gloo_mesh_int_cert_name}.conf" <<EOF
[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name
[req_distinguished_name]
[ v3_req ]
basicConstraints = CA:TRUE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer:always
keyUsage = digitalSignature, keyEncipherment, keyCertSign
extendedKeyUsage = clientAuth, serverAuth
subjectAltName = @alt_names
[alt_names]
DNS = $dns_name
EOF

# Generate gloo-mesh-int private key
openssl genrsa -out "${gloo_mesh_int_cert_name}.key" 2048

# Generate gloo-mesh-int CSR
openssl req -new -key "${gloo_mesh_int_cert_name}.key" -out "${gloo_mesh_int_cert_name}.csr" -subj "/CN=$gloo_mesh_int_cert_name"

# Sign certificate with local relay-root
openssl x509 -req \
  -days 3650 \
  -CA "${relay_root_cert_name}.crt" -CAkey "${relay_root_cert_name}.key" \
  -set_serial 0 \
  -in gloo-mesh-int.csr -out gloo-mesh-int.crt \
  -extensions v3_req -extfile "gloo-mesh-int.conf"

# server cert
cat >"${relay_server_cert_name}.conf" <<EOF
[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name
[req_distinguished_name]
[ v3_req ]
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer:always
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, serverAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = $dns_name
DNS.2 = $well_known_mac_docker_host
IP.1 = $well_known_linux_docker_host
EOF

openssl genrsa -out "${relay_server_cert_name}.key" 2048
openssl req -new -key "${relay_server_cert_name}.key" -out "${relay_server_cert_name}.csr" -subj "/CN=${relay_server_cert_name}/O=${relay_server_cert_name}"
openssl x509 -req \
  -days 3650 \
  -CA "${gloo_mesh_int_cert_name}.crt" -CAkey "${gloo_mesh_int_cert_name}.key" \
  -set_serial 0 \
  -in "${relay_server_cert_name}.csr" -out "${relay_server_cert_name}.crt" \
  -extensions v3_req -extfile "${relay_server_cert_name}.conf"

cat "${gloo_mesh_int_cert_name}.crt" >> "${relay_server_cert_name}.crt"

# signing cert
cat >"${relay_signing_cert_name}.conf" <<EOF
[req]
req_extensions = v3_req
distinguished_name = req_distinguished_name
[req_distinguished_name]
[ v3_req ]
basicConstraints = critical,CA:TRUE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer:always
keyUsage = nonRepudiation, digitalSignature, keyEncipherment, keyCertSign
extendedKeyUsage = clientAuth, serverAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = $dns_name
DNS.2 = $well_known_mac_docker_host
IP.1 = $well_known_linux_docker_host
EOF

openssl genrsa -out "${relay_signing_cert_name}.key" 2048
openssl req -new -key "${relay_signing_cert_name}.key" -out "${relay_signing_cert_name}.csr" -subj "/CN=${relay_signing_cert_name}/O=${relay_signing_cert_name}"
openssl x509 -req \
  -days 3650 \
  -CA "${gloo_mesh_int_cert_name}.crt" -CAkey "${gloo_mesh_int_cert_name}.key" \
  -set_serial 0 \
  -in ${relay_signing_cert_name}.csr -out ${relay_signing_cert_name}.crt \
  -extensions v3_req -extfile "${relay_signing_cert_name}.conf"


cat "${gloo_mesh_int_cert_name}.crt" >> ${relay_signing_cert_name}.crt

kubectl create secret generic "${relay_server_cert_name}-secret" \
  --namespace gloo-mesh \
  --from-file=tls.key="${relay_server_cert_name}.key" \
  --from-file=tls.crt="${relay_server_cert_name}.crt" \
  --from-file=ca.crt="${relay_root_cert_name}.crt" \
  -oyaml > "${relay_server_cert_name}-secret.yaml"

kubectl create secret generic "${relay_signing_cert_name}-secret" \
  --namespace gloo-mesh \
  --from-file=tls.key="${relay_signing_cert_name}.key" \
  --from-file=tls.crt="${relay_signing_cert_name}.crt" \
  --from-file=ca.crt="${relay_root_cert_name}.crt" \
  -oyaml > "${relay_signing_cert_name}-secret.yaml"

kubectl create secret generic "${relay_root_cert_name}-tls-secret" \
  --namespace gloo-mesh \
  --from-file=ca.crt="${relay_root_cert_name}.crt" \
  --from-file=tls.key="${relay_root_cert_name}.key" \
  -oyaml > "${relay_root_cert_name}-tls-secret.yaml"

# this is lazy and wrong for prod, it creates mgmt cluster certs everywhere
for cluster in $clusters; do
  kubectl create ns gloo-mesh --context "$cluster" || true

  kubectl apply -f "${relay_server_cert_name}-secret.yaml" \
    --context "$cluster" \
    --namespace gloo-mesh

  kubectl apply -f "${relay_signing_cert_name}-secret.yaml" \
    --context "$cluster" \
    --namespace gloo-mesh

  kubectl apply -f "${relay_root_cert_name}-tls-secret.yaml" \
    --context "$cluster" \
    --namespace gloo-mesh

  kubectl apply --context "$cluster" -f- <<EOF
kind: Secret
apiVersion: v1
metadata:
  name: relay-identity-token-secret
  namespace: gloo-mesh
stringData:
  token: "1234"
EOF
done