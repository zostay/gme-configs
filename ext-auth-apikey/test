#!/usr/bin/env perl

use v5.36;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use JSON qw( decode_json );

use Kubectl qw( Cluster1 MgmtCluster );
use Turl qw( test_GET );
use Cert qw( make_tls_secret_if_needed );

sub MAIN () {
    Cluster1->apply("load-c1.yaml");
    MgmtCluster->apply("load-mgmt.yaml");

    make_tls_secret_if_needed({
        cluster   => Cluster1,
        name      => 'example-secret',
        host      => 'www.example.com',
        namespace => 'istio-gateway-ns',
    });

    test_GET(
        "https://www.example.com:31443/productpage",
        "product page is authorized without key",
    );

    test_GET(
        "https://www.example.com:31443/ratings/1",
        "ratings is unauthorized without key",
        {
            expected_status => 401,
        },
    );

    test_GET(
        "https://www.example.com:31443/ratings/1",
        "ratings is authorized with key",
        {
            headers => [
                'api-key' => 'N2YwMDIxZTEtNGUzNS1jNzgzLTRkYjAtYjE2YzRkZGVmNjcy',
            ],
        },
    );

    test_GET(
        "https://www.example.com:31443/httpbin-ratings",
        "httpbin-ratings is unauthorized without key",
        {
            expected_status => 401,
        },
    );

    test_GET(
        "https://www.example.com:31443/httpbin-ratings",
        "httpbin reports receiving the API Key header",
        {
            headers => [
                'api-key' => 'N2YwMDIxZTEtNGUzNS1jNzgzLTRkYjAtYjE2YzRkZGVmNjcy',
            ],
            response_matches => sub ($res) {
                my $data = decode_json($res->content);
                return $data->{headers}{"X-User-Id"} eq "userID-12345";
            },
        },
    );
}

MAIN;